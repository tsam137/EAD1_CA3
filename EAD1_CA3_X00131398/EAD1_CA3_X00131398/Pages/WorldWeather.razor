@page "/weather"
@inject HttpClient Http

<h3>Weather in @weatherLocation</h3>


<p>This component demonstrates fetching data from a weather API and displaying information and pictures dynamically.</p>



@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    //User can select a Location from the dropdown menu and it sets the forecast location to the speicifed location through the key value
    //Had to Math.Celeing to show no decimal place for the degrees and for the wind speed.
    <div class="mb-2 p-3 col-sm-5">
        <select class="form-control" @bind="key" @onclick="@GetDataAsync">
            <option selected disabled value="-1"> Select Location</option>
            <option value=560743> Dublin</option>
            <option value=1118370> Tokyo</option>
            <option value=44418> London</option>
            <option value=650272> Frankfurt</option>
        </select>
    </div>

    //The temperature symbol can be changed in the dropdown menu and then it changes the degrees to either celsius or farenheit
    <div class="mb-2 p-3 col-sm-5">
        <select class="form-control" @bind="tempSymbol" @onclick="@GetDataAsync">
            <option selected disabled value="-1"> Select Degrees</option>
            <option value=F>Fahrenheit</option>
            <option value=C>Celsius</option>
        </select>
    </div>

    <br />
    //I added an if statement that checks if the state of the weather is a certain state then adds the suitable image of that state to the forecast cards
    @foreach (var weatherForecast in data.consolidated_weather)
    {
      
        <div class="col-md-5 col-sm-12 col-lg-5 mt-2 mb-2">
            <div class="card">
                <div id="container">
                    <div class="card-body">
                        <h5 class="card-title">Date: @weatherForecast.applicable_date</h5>
                        <h6 class="card-subtitle mb-2 text">Weather State: @weatherForecast.weather_state_name</h6>
                        <h6 class="card-subtitle mb-2 text-muted"> @weatherLocation  </h6>
                        <p class="card-text"> </p>
                        @if (weatherForecast.weather_state_name == "Light Rain")
                        {
                            <p> <img class="resize" src=https://icon-library.com/images/weather-icon-gif/weather-icon-gif-3.jpg style="width:175px; height:175px;"> </p>
                        }
                        else if (weatherForecast.weather_state_name == "Heavy Cloud")
                        {
                            <p> <img class="resize" src=https://icon-library.com/images/weather-icon-gif/weather-icon-gif-2.jpg style="width:175px; height:175px;"> </p>
                        }
                        else if (weatherForecast.weather_state_name == "Heavy Rain")
                        {
                            <p> <img class="resize" src=https://icon-library.com/images/weather-icon-gif/weather-icon-gif-3.jpg style="width:175px; height:175px;"> </p>
                        }
                        else if (weatherForecast.weather_state_name == "Showers")
                        {
                            <p> <img class="resize" src=https://icon-library.com/images/weather-icon-gif/weather-icon-gif-3.jpg style="width:175px; height:175px;"> </p>
                        }
                        else if (weatherForecast.weather_state_name == "Light Cloud")
                        {
                            <p> <img class="resize" src=https://icon-library.com/images/weather-icon-gif/weather-icon-gif-2.jpg style="width:175px; height:175px;"> </p>
                        }
                        else if (weatherForecast.weather_state_name == "Clear")
                        {
                            <p> <img class="resize" src=https://icon-library.com/images/weather-icon-gif/weather-icon-gif-4.jpg style="width:175px; height:175px;"> </p>
                        }
                        else
                        {
                            <p> <img class="resize" src=https://icon-library.com/images/weather-icon-gif/weather-icon-gif-2.jpg style="width:175px; height:175px;"> </p>
                        }
                        <p></p>
                        @if (tempSymbol == 'F')
                        {
                            var farenheit = (weatherForecast.the_temp * 9 / 5) + 32;
                            Math.Floor(farenheit);
                            <h4 class="card-subtitle mb-2 text">Temperature: @Math.Ceiling(farenheit)° @tempSymbol</h4>
                        }
                        else if (tempSymbol == 'C')
                        {
                            var celsius = weatherForecast.the_temp;
                            <h4 class="card-subtitle mb-2 text">Temperature: @Math.Ceiling(celsius)° @tempSymbol</h4>
                        }
                        <h6 class="card-subtitle mb-2 text-muted">Wind Speed: @Math.Ceiling(weatherForecast.wind_speed)mph</h6>
                        <h6 class="card-subtitle mb-2 text-muted">Humidity: @weatherForecast.humidity</h6>
                    </div>
                </div>
            </div>
     </div>
    }
}

@code {

    //
    //Variables
    //

    private WeatherData data;
    private Consolidated_Weather conWeather;
    private string key = "560743";                                    //This is the key that is added to the uri to display the different forecasts for the different location. It is on Dublin by default
    string weatherLocation = "Dublin";                               //This stores the location of weatherforecast so that I can dynamically display it in the header and in the forecast cards
    public char tempSymbol = 'C';                                   //Symbol to identify which degrees is being displayed
    private string errormessage;
    string uri = "https://meta-weather.now.sh/api/location/";


    // https://meta-weather.now.sh/api/location/560743
    private async Task GetDataAsync()
    {

        try
        {
            //Checks the key and if the key matches the key from the dropdown above then it sets the forecast location to the speicifed location
            if (key == "560743")
            {
                weatherLocation = "Dublin, Ireland";
            }

            else if (key == "1118370")
            {
                weatherLocation = "Tokyo, Japan";
            }

            else if (key == "44418")
            {
                weatherLocation = "London, England";
            }
            else if(key == "650272")
            {
                weatherLocation = "Frankfurt, Germany";
            }

            data = await Http.GetJsonAsync<WeatherData>(uri + key + "/");



            errormessage = String.Empty;
        }
        catch (Exception e)
        {

            errormessage = e.Message;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();
    }


    //
    //Models
    //

    public class WeatherData
    {
        public Consolidated_Weather[] consolidated_weather { get; set; }
        public DateTime time { get; set; }
        public DateTime sun_rise { get; set; }
        public DateTime sun_set { get; set; }
        public string timezone_name { get; set; }
        public Parent parent { get; set; }
        public Source[] sources { get; set; }
        public string title { get; set; }
        public string location_type { get; set; }
        public int woeid { get; set; }
        public string latt_long { get; set; }
        public string timezone { get; set; }
    }

    public class Parent
    {
        public string title { get; set; }
        public string location_type { get; set; }
        public int woeid { get; set; }
        public string latt_long { get; set; }
    }

    public class Consolidated_Weather
    {
        public long id { get; set; }
        public string weather_state_name { get; set; }
        public string weather_state_abbr { get; set; }
        public string wind_direction_compass { get; set; }
        public DateTime created { get; set; }
        public string applicable_date { get; set; }
        public float min_temp { get; set; }
        public float max_temp { get; set; }
        public float the_temp { get; set; }
        public float wind_speed { get; set; }
        public float wind_direction { get; set; }
        public float air_pressure { get; set; }
        public int humidity { get; set; }
        public float visibility { get; set; }
        public int predictability { get; set; }




    }

    public class Source
    {
        public string title { get; set; }
        public string slug { get; set; }
        public string url { get; set; }
        public int crawl_rate { get; set; }
    }

}

@page "/weather"
@inject HttpClient Http

<h3>Weather in @weatherLocation</h3>


<p>This component demonstrates fetching data from the server.</p>



@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <div class="mb-2 p-3 col-sm-5">
        <select class="form-control" @bind="key" @onclick="@GetDataAsync">
            <option selected disabled value="-1"> Select Location</option>
            <option value=560743> Dublin</option>
            <option value=1118370> Tokyo</option>
            <option value=44418> London</option>
        </select>
    </div>

    <br />

    @foreach (var weatherForecast in data.consolidated_weather)
    {
        <div class="col-md-6 col-sm-12 col-lg-6 mt-2 mb-2 display:flex;">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Date: @weatherForecast.applicable_date</h5>
                    <h6 class="card-subtitle mb-2 text">Weather State: @weatherForecast.weather_state_name</h6>
                    <p class="card-text"> </p>
                    @if (weatherForecast.weather_state_name == "Light Rain")
                    {
                        <p> <img class="resize" src=https://ssl.gstatic.com/onebox/weather/64/rain_s_cloudy.png style="width:175px; height:175px;"> &#8203;</p>
                    }
                    else if (weatherForecast.weather_state_name == "Heavy Cloud")
                    {
                        <p> <img class="resize" src=https://ssl.gstatic.com/onebox/weather/64/cloudy.png style="width:175px; height:175px;"> &#8203;</p>
                    }
                    else if (weatherForecast.weather_state_name == "Heavy Rain")
                    {
                        <p> <img class="resize" src=https://ssl.gstatic.com/onebox/weather/64/rain.png style="width:175px; height:175px;"> &#8203;</p>
                    }
                    else if (weatherForecast.weather_state_name == "Showers")
                    {
                        <p> <img class="resize" src=https://ssl.gstatic.com/onebox/weather/64/rain_light.png style="width:175px; height:175px;"> &#8203;</p>
                    }
                    else if (weatherForecast.weather_state_name == "Light Cloud")
                    {
                        <p> <img class="resize" src=https://ssl.gstatic.com/onebox/weather/64/partly_cloudy.png style="width:175px; height:175px;"> &#8203;</p>
                    }
                    else if (weatherForecast.weather_state_name == "Clear")
                    {
                        <p> <img class="resize" src=https://ssl.gstatic.com/onebox/weather/64/sunny.png style="width:175px; height:175px;"> &#8203;</p>
                    }
                    else
                    {
                        <p> <img class="resize" src=https://ssl.gstatic.com/onebox/weather/64/partly_cloudy.png style="width:175px; height:175px;"> &#8203;</p>
                    }
                    <h6 class="card-subtitle mb-2 text">Temperature: @weatherForecast.the_temp C</h6>
                    <h6 class="card-subtitle mb-2 text-muted">Humidity: @weatherForecast.humidity C</h6>
                </div>
            </div>
        </div>
    }
}


@code {

    private WeatherData data;
    private string key = "560743";
    string weatherLocation = "Dublin";
    private string errormessage;
    string uri = "https://meta-weather.now.sh/api/location/";


    // https://meta-weather.now.sh/api/location/560743
    private async Task GetDataAsync()
    {

        try
        {
            if (key == "560743")
            {
                weatherLocation = "Dublin";
            }

            else if (key == "1118370")
            {
                weatherLocation = "Tokyo";
            }

            else if (key == "44418")
            {
                weatherLocation = "London";
            }

            data = await Http.GetJsonAsync<WeatherData>(uri + key + "/");


            errormessage = String.Empty;
        }
        catch (Exception e)
        {

            errormessage = e.Message;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();
    }


    public class WeatherData
    {
        public Consolidated_Weather[] consolidated_weather { get; set; }
        public DateTime time { get; set; }
        public DateTime sun_rise { get; set; }
        public DateTime sun_set { get; set; }
        public string timezone_name { get; set; }
        public Parent parent { get; set; }
        public Source[] sources { get; set; }
        public string title { get; set; }
        public string location_type { get; set; }
        public int woeid { get; set; }
        public string latt_long { get; set; }
        public string timezone { get; set; }
    }

    public class Parent
    {
        public string title { get; set; }
        public string location_type { get; set; }
        public int woeid { get; set; }
        public string latt_long { get; set; }
    }

    public class Consolidated_Weather
    {
        public long id { get; set; }
        public string weather_state_name { get; set; }
        public string weather_state_abbr { get; set; }
        public string wind_direction_compass { get; set; }
        public DateTime created { get; set; }
        public string applicable_date { get; set; }
        public float min_temp { get; set; }
        public float max_temp { get; set; }
        public float the_temp { get; set; }
        public float wind_speed { get; set; }
        public float wind_direction { get; set; }
        public float air_pressure { get; set; }
        public int humidity { get; set; }
        public float visibility { get; set; }
        public int predictability { get; set; }
    }

    public class Source
    {
        public string title { get; set; }
        public string slug { get; set; }
        public string url { get; set; }
        public int crawl_rate { get; set; }
    }

}
